//Brute force approach
//Using three nested  loop 

Pseudo Code:
 max_sum = 0
    for(i = 0 to n-1)
    {
       for(j = i to n-1) 
       {  
          sum = 0
          for(k = i to j)
             sum = sum + A[k]
          if(sum > max_sum)
             max_sum = sum
       }
    } 
return max_sum 





//Optimize approach of brute force
//Using two nested loop

//Pseudo code:

max_sum = 0
    for ( i = 0 to n-1)
    {   
       sum=0
       for( j = i to n-1) 
       {  
         sum = sum +  A[j]
         if (sum > max_sum)
             max_sum = sum
        }
    }
retun max_sum



// kadane's Algorithm

class Solution {
    public int maxSubArray(int[] nums) {
        
        int sum = 0;
        int max = nums[0];
        int n=nums.length;
        for(int i=0;  i<n; i++){
            sum = sum + nums[i];
            if(sum > max){
                max = sum;
            }
            if(sum < 0){
                sum = 0;
            }
        }
        return max;
    }
}

//Time complexity is o(n)
//space complexity is o(1)
