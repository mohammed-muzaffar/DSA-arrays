
//Brute Force Approach
class Solution {
    public int majorityElement(int[] nums) {
        	 if(nums.length == 1) {
            return nums[0];
        }
        int count = 0;
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            int temp = 0;
            for (int j = i; j < nums.length; j++) {
                if(nums[j] == nums[i]) {
                    temp++;
                    if(temp > (nums.length)/2) {
                        return nums[i];
                    }
                }
                else {
                    i = j - 1;
                    break;
                }                
            }
        }
        return -1; 
    }
}

//Time Complexity: o(nlogn) + o(n*n)
//Space Complexity: o(1)


//Boyerâ€“Moore majority vote algorithm
class Solution {
    public int majorityElement(int[] nums) {
        	 if(nums.length == 1) {
            return nums[0];
        }
        int candidate = -1;
        int votes = 0;
        
        for(int i = 0; i < nums.length; i++){
            if(votes == 0){
                candidate = nums[i];
                votes++;
            } else {
                if(candidate == nums[i]){
                    votes++;
                } else {
                    votes--;
                }
            }
        }
        return candidate;
    }
}
//Time Complexity: o(n)
//Space Complexity: o(1)
