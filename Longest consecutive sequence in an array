class Solution {
    public int longestConsecutive(int[] nums) {
       if( nums == null || nums.length == 0) return 0;
        Set<Integer> map = new HashSet<>();
        
        int n = nums.length;
        
        // adding the elements in hashmap
        for(Integer num: nums){
            map.add(num);
        }
        
        int longestSequence = 0;
        
        for(Integer num: nums){
            if(!map.contains(num-1)){
                int currentNum = num;
                int currentSeq = 0;
                
                while(map.contains(currentNum)){
                    currentNum = currentNum + 1;
                    currentSeq = currentSeq + 1;
                }
                
                longestSequence = Math.max(currentSeq, longestSequence);
            } 
                
        }
        return longestSequence;
    }
}

//Time complexity: O(n)
//Space complexity: O(1)
