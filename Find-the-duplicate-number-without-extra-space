// most optimize solution
// This is the cycle linked list approach.

class Solution {
    public int findDuplicate(int[] nums) {
        int slow = nums[0]; // slow take one step
        int fast = nums[0]; // fast take two steps
        
        //first collission of  slow and fast pointer
        do{
            slow = nums[slow];
            fast = nums[nums[fast]];
        } while(slow != fast);
        
        //after collission fast pointer jump only one step and when they collied again the number is duplicate number.
        
        fast = nums[0];
        while(slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }
}

//Time complexity o(n)
//Space complexity o(1)
