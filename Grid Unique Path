
//Using Recursive Apporach
class Solution {
public int countPaths(int i,int j,int n,int m)
    {
        if(i==(n-1)&&j==(m-1)) return 1;
        if(i>=n||j>=m) return 0;
        else return countPaths(i+1,j,n,m)+countPaths(i,j+1,n,m);
    }
    int uniquePaths(int m, int n) {
       return countPaths(0,0,m,n);
    }
}

// Exponential Time Complexity: O(2^n)
// Exponential Space Complexity: O(2^n)



// Using Dynamic Programming
class Solution {
public int countPaths(int i,int j,int n,int m,vector<vector<int>> &dp)
    {
       if(i == (n-1) && j == (m-1)) return 1;
       if(i >=n || j >=m) return 0;
       
       if(dp[i][j] != -1) return dp[i][j];
       else return dp[i][j] = countPaths(i+1,j,n,m,dp) + countPaths(i,j+1,n,m,dp);
    }
}

//Time Complexity:o(n*m)
//Space Complexity: o(n*m)



//Combinatorics Solution
class Solution {
    public int uniquePaths(int m, int n) {
        int N = n + m - 2;
        int r = n - 1;
        double res = 1;
        for(int i = 1; i <= r; i++){
            res = res * (N - r + i) / i;
        }
        return (int)res;
    }
}

//Time Complexity: o(n-1)
//Space Complexity: o(1)
